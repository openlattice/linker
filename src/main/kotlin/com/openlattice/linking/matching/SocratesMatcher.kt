/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

package com.openlattice.linking.matching

import com.codahale.metrics.annotation.Timed
import com.google.common.base.Stopwatch
import com.openlattice.data.EntityDataKey
import com.openlattice.linking.Matcher
import com.openlattice.linking.util.PersonMetric
import com.openlattice.rhizome.hazelcast.DelegatedStringSet
import org.apache.olingo.commons.api.edm.FullQualifiedName
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork
import org.nd4j.linalg.factory.Nd4j
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import java.util.*
import java.util.concurrent.TimeUnit

const val THRESHOLD = 0.9
private val logger = LoggerFactory.getLogger(SocratesMatcher::class.java)

/**
 * Performs matching using the model generated by Socrates.
 */
@Component
class SocratesMatcher(model: MultiLayerNetwork, private val fqnToIdMap: Map<FullQualifiedName, UUID>) : Matcher {

    private var localModel = ThreadLocal.withInitial { model }

    //            Thread.currentThread().contextClassLoader.getResourceAsStream("model.bin") }

    override fun updateMatchingModel(model: MultiLayerNetwork) {
        localModel = ThreadLocal.withInitial { model }
    }

    /**
     * Gets an initial block of entities that closely match the entity.
     * @param block A block of potential matches based on search
     * @return block The resulting block around the entity data key in block.first
     */
    @Timed
    override fun initialize(
            block: Pair<EntityDataKey, Map<EntityDataKey, Map<UUID, Set<Any>>>>
    ): Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>> {
        val model = localModel.get()

        val entityDataKey = block.first
        val entities = block.second

        // extract properties and features for all entities in block
        val firstProperties = extractProperties(entities[entityDataKey]!!)
        val extractedFeatures = entities.mapValues {
            val extractedProperties = extractProperties(it.value)
            extractFeatures(firstProperties, extractedProperties)
        }

        // transform features to matrix and compute scores
        val featureKeys = extractedFeatures.map { it.key }.toTypedArray()
        val featureMatrix = extractedFeatures.map { it.value.values.toDoubleArray() }.toTypedArray()
        val scores = computeScore(model, featureMatrix).toTypedArray()
        val matchedEntities = featureKeys.zip(scores).toMap().toMutableMap()
        val initializedBlock = entityDataKey to mutableMapOf(entityDataKey to matchedEntities)

        // trim low scores
        trimAndMerge(initializedBlock)
        return initializedBlock
    }

    /**
     * Computes the pairwise matching values for a block.
     * @param block The resulting block around for the entity data key in block.first
     * @return All pairs of entities in the block scored by the current model.
     */
    @Timed
    override fun match(
            block: Pair<EntityDataKey, Map<EntityDataKey, Map<UUID, Set<Any>>>>
    ): Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>> {
        val sw = Stopwatch.createStarted()

        val model = localModel.get()
        val entityDataKey = block.first
        val entities = block.second


        // extract properties and features for all entities in block
        val extractedFeatures = entities.mapValues {
            val selfProperties = extractProperties(it.value)
            entities.mapValues {
                val otherProperties = extractProperties(it.value)
                extractFeatures(selfProperties, otherProperties)
            }
        }

        // transform features to matrix and compute scores
        val featureMatrix = extractedFeatures.flatMap { (_, features) ->
            features.map {
                it.value.values.toDoubleArray()
            }
        }.toTypedArray()

        // extract list of keys (instead of map)
        val featureKeys = extractedFeatures.flatMap { (entityDataKey1, features) ->
            features.map {
                entityDataKey1 to it.key
            }
        }

        val featureExtractionSW = sw.elapsed(TimeUnit.MILLISECONDS)

        // get scores from matrix
        val scores = computeScore(model, featureMatrix)

        // collect and combine keys and scores
        val results = scores.zip(featureKeys).map {
            ResultSet(it.second.first, it.second.second, it.first)
        }

        // from list of results to expected output
        val matchedEntities = results.groupBy { it.lhs }.mapValues { x ->
            x.value.groupBy { it.rhs }.mapValues { x -> x.value.get(0).score }.toMutableMap()
        }.toMutableMap()

        logger.info(
                "Matching block {} with {} elements: feature extraction: {} ms - matching: {} ms - total: {} ms",
                block.first, block.second.values.map { it.size }.sum(),
                featureExtractionSW,
                sw.elapsed(TimeUnit.MILLISECONDS) - featureExtractionSW,
                sw.elapsed(TimeUnit.MILLISECONDS)
        )

        return entityDataKey to matchedEntities

    }

    private fun computeScore(
            model: MultiLayerNetwork, features: Array<DoubleArray>
    ): DoubleArray {
        val sw = Stopwatch.createStarted()
        val scores = model.getModelScore(features)
        logger.info("The model computed scores in {} ms", sw.elapsed(TimeUnit.MILLISECONDS))
        return scores
    }

    override fun extractFeatures(
            lhs: Map<UUID, DelegatedStringSet>, rhs: Map<UUID, DelegatedStringSet>
    ): Map<String, Double> {
        return PersonMetric.pDistance(lhs, rhs, fqnToIdMap).map { it.key to (it.value * 100.0) }.toMap()
    }

    override fun extractProperties(entity: Map<UUID, Set<Any>>): Map<UUID, DelegatedStringSet> {
        return entity.map { it.key to DelegatedStringSet.wrap(it.value.map(Any::toString).toSet()) }.toMap()
    }

    @Timed
    override fun trimAndMerge(
            matchedBlock: Pair<EntityDataKey, MutableMap<EntityDataKey, MutableMap<EntityDataKey, Double>>>
    ) {
        //Trim non-center matching thigns.
        matchedBlock.second[matchedBlock.first] = matchedBlock.second[matchedBlock.first]?.filter {
            it.value > THRESHOLD
        }?.toMutableMap() ?: mutableMapOf()
    }
}

fun MultiLayerNetwork.getModelScore(features: Array<DoubleArray>): DoubleArray {
    return try {
        output(Nd4j.create(features)).toDoubleVector()
    } catch (ex: Exception) {
        logger.error("Failed to compute model score trying again! Features = {}", features.toList(), ex)
        try {
            output(Nd4j.create(features)).toDoubleVector()
        } catch (ex2: Exception) {
            logger.error("Failed to compute model score a second time! Return 0! Features = {}", features.toList(), ex)
            Nd4j.ones(features.size).toDoubleVector()
        }
    }
}

data class ResultSet(val lhs: EntityDataKey, val rhs: EntityDataKey, val score: Double)
